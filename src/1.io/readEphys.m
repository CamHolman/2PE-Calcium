function ephys = readEphys(datDir, eType)
%{
    This function is similar to readFts, except that it is designed for reading
    in electrophysiological data. The fundamental use case is reading velocity
    data in order to build correlations between AQuA data and movement. It can also
    be used to read in LFP or anything else that might be held in the paq files 
    generated by our recording aparatus

    As people may prefer to extract their ephys data first into a csv for editing out 
    artifacts or early visualizaiton, it is designed to either read in straight from
    paq files or from csv. 

    Inputs:
        datDir      |   Directory containing all related .csv or .paq files. There should
                        be one file per trial (there can be both a .csv and a .paq file
                        but there should not be multiple of each type per trial. All trials 
                        should be related to the AQuA files being read in such that their 
                        indicies correlate in the buildMouse function ant others 

                        The organization of this directory is important 
                        and should follow the outline below:
                            > Mouse 
                            |   > Trial 1 
                            |   |   > AQuA output folder
                            |   |   |   - _aqua.mat
                            |   |   |   - _aqua_landmark.png
                            |   |   |   - _aqua.tif
                            |   |   |   - _aqua.xlsx
                            |   |   |
                            |   |   - ephys.paq and/or ephys.csv
                            |   |   - other trial data (pupil, etc) 
                            |   |
                            |   > Trial 2
                            |   |   > AQuA output folder
                            ...

                        datDir should refer to 'Mouse', i.e.:
                            '/path/to/mouse/'

            eType       |   A string that indicates whether you want to read in ephys or opto data from 
                        a .paq or .csv file. You should enter either:
                            'paq'
                            'csv'
    
%} 

    % Set up base struct
    ephys = struct()

    %% Read in .CSV files
    if eType == 'csv'
        pp = struct2cell(dir([datDir, '**/*.csv']));
        A = size(pp,2);

        % Read through each CSV
        for kk = 1:A
            eFile = pp{1,kk};
            fName0 = eFile(1:end-4);
            f0 = [pp{2,kk}, '/', pp{1,kk}];

            if ~exist(f0,'file')
                disp(f0);
                disp('File does not exist');
                continue
            end
            
            fprintf('Currently reading in csv file: %s\n',fName0)
            eData =  readtable(f0, "ReadVariableNames",false, "HeaderLines", 1)
            

            % Iterate through columns to assign types
            for col = 1:width(eData)
                % Check if it is optoswitch data 
                    %{
                        Note that the method to check if data is opto data is reliant
                        upon the data coming in the same way, ie the optoswitch must 
                        report between 0 and 4 mV. This may need to be updated
                    %}
                
                if round(min(eData{:,col})) == 0 && round(max(eData{:,col})) == 4
                    ephys.opto{kk} = eData{:,col}
                
                else 
                    %ephys.other{kk,col} = eData{:,col} % This may cause overwriting issues with multiple LFP lines
                    % seems to be reading the ms lines in here. changin the ix above to 
                    % make the ordering consistent.. ie. 1x3 vs 3x1 
                    ephys.other{col,kk} = eData{:,col} 
                end
                

            end
            
            %{
                need to figure out how to make it parse files of differing sizes (numcols).. how to detect 
                when a col is opto or is LFP etc.

                does it matter that the CSVs from Sae with opto begin with ms=0 not ms=1 ... 
                in detectBursts everything is converted from frames to (1)
                    - Regarding above the 0 --> 1 issue is resolved automatically by readEphys:
                    changes index by +1 inherently

            %}

        end
    end
end